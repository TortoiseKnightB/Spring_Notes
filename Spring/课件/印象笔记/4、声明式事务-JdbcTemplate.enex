<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export2.dtd">
<en-export export-date="20220421T064428Z" application="Evernote/Windows" version="6.x">
<note><title>4、声明式事务-JdbcTemplate</title><content><![CDATA[<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div>事务：</div><div>&nbsp; &nbsp; &nbsp;操作数据库；</div><div>&nbsp; &nbsp; &nbsp;Spring提供了JdbcTemplate能快捷的操作数据库；</div><div>&nbsp; &nbsp; &nbsp;JdbcTemplate和QueryRunner；</div><div>JdbcTemplate使用步骤：</div><div>1）、导包；</div><div align="left" style="min-height: 18pt;"><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>spring-jdbc-4.0.0.RELEASE.jar</div><div>spring-orm-4.0.0.RELEASE.jar</div><div>spring-tx-4.0.0.RELEASE.jar</div></div><div><br/></div></div><div>2）、写配置</div><div align="left" style="min-height: 18pt;"><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--引入外部配置文件&nbsp; --&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&lt;context:property-placeholder location=&quot;classpath:dbconfig.properties&quot;/&gt;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- 实验1：测试数据源</div><div>&nbsp;&nbsp;&nbsp;&nbsp;${}取出配置文件中的值</div><div>&nbsp;&nbsp;&nbsp;&nbsp;#{}Spring的表达式语言</div><div>&nbsp;&nbsp;&nbsp;&nbsp; --&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=&quot;user&quot; value=&quot;${jdbc.user}&quot;&gt;&lt;/property&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;&gt;&lt;/property&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=&quot;jdbcUrl&quot; value=&quot;${jdbc.jdbcUrl}&quot;&gt;&lt;/property&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;property name=&quot;driverClass&quot; value=&quot;${jdbc.driverClass}&quot;&gt;&lt;/property&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;</div><div><br/></div><div>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!-- Spring提供了一个类JdbcTemplate，我们用它操作数据库；</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;导入Spring的数据库模块</div><div>spring-jdbc-4.0.0.RELEASE.jar</div><div>spring-orm-4.0.0.RELEASE.jar</div><div>spring-tx-4.0.0.RELEASE.jar</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;constructor-arg name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/constructor-arg&gt;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/bean&gt;</div></div><div><br/></div></div><div>3）、测试</div><div align="left" style="min-height: 18pt;"><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>@Test</div><div>&nbsp;&nbsp;&nbsp;&nbsp;public void test02(){</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String sql = &quot;UPDATE employee SET salary=? WHERE emp_id=?&quot;;</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int update = jdbcTemplate.update(sql, 1300.00,5);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(&quot;更新员工：&quot;+update);</div><div>&nbsp;&nbsp;&nbsp;&nbsp;}</div></div><div><br/></div></div><div><br/></div><div style="-en-codeblock: true; box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>package com.atguigu.test;</div><div><br/></div><div>import static org.junit.Assert.*;</div><div><br/></div><div>import java.sql.Connection;</div><div>import java.sql.SQLException;</div><div>import java.util.ArrayList;</div><div>import java.util.HashMap;</div><div>import java.util.List;</div><div>import java.util.Map;</div><div><br/></div><div>import javax.sql.DataSource;</div><div><br/></div><div>import org.junit.Test;</div><div>import org.springframework.context.ApplicationContext;</div><div>import org.springframework.context.support.ClassPathXmlApplicationContext;</div><div>import org.springframework.dao.DataAccessException;</div><div>import org.springframework.jdbc.core.BeanPropertyRowMapper;</div><div>import org.springframework.jdbc.core.JdbcTemplate;</div><div>import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;</div><div>import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;</div><div><br/></div><div>import com.atguigu.bean.Employee;</div><div>import com.atguigu.dao.EmployeeDao;</div><div><br/></div><div>public class TxTest {</div><div><br/></div><div>&nbsp; &nbsp; ApplicationContext ioc = new ClassPathXmlApplicationContext(&quot;ApplicationContext.xml&quot;);</div><div>&nbsp; &nbsp; JdbcTemplate jdbcTemplate = ioc.getBean(JdbcTemplate.class);</div><div>&nbsp; &nbsp; NamedParameterJdbcTemplate namedJdbcTemplate = ioc.getBean(NamedParameterJdbcTemplate.class);</div><div><br/></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp;* 实验9：创建BookDao，自动装配JdbcTemplate对象</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; @Test</div><div>&nbsp; &nbsp; public void test09(){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; EmployeeDao bean = ioc.getBean(EmployeeDao.class);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Employee employee = new Employee();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; employee.setEmpName(&quot;哈哈2&quot;);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; employee.setSalary(998.98);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; bean.saveEmployee(employee);</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp;* 实验8：重复实验7，以SqlParameterSource形式传入参数值</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; @Test</div><div>&nbsp; &nbsp; public void test08(){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; String sql = &quot;INSERT INTO employee(emp_name,salary) VALUES(:empName,:salary)&quot;;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Employee employee = new Employee();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; employee.setEmpName(&quot;哈哈&quot;);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; employee.setSalary(998.98);</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; //</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int i = namedJdbcTemplate.update(sql, new BeanPropertySqlParameterSource(employee));</div><div>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(i);</div><div><br/></div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp;* 实验7：使用带有具名参数的SQL语句插入一条员工记录，并以Map形式传入参数值</div><div>&nbsp; &nbsp; &nbsp;*</div><div>&nbsp; &nbsp; &nbsp;* 具名参数：（具有名字的参数，参数不是占位符了，而是一个变量名）</div><div>&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;语法格式：&nbsp; &nbsp;:参数名</div><div>&nbsp; &nbsp; &nbsp;* Spring有一个支持具名参数功能的JdbcTemplate</div><div>&nbsp; &nbsp; &nbsp;*</div><div>&nbsp; &nbsp; &nbsp;* 占位符参数：?的顺序千万不能乱。传参的时候一定注意；</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; @Test</div><div>&nbsp; &nbsp; public void test07(){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; String sql = &quot;INSERT INTO employee(emp_name,salary) VALUES(:empName,:salary)&quot;;</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; //Map</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Map&lt;String, Object&gt; paramMap = new HashMap&lt;&gt;();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; //将所有具名参数的值都放在map中；</div><div>&nbsp; &nbsp; &nbsp; &nbsp; paramMap.put(&quot;empName&quot;, &quot;田七&quot;);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; paramMap.put(&quot;salary&quot;, 9887.98);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int update = namedJdbcTemplate.update(sql, paramMap);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(update);</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp;* 实验6：查询最大salary</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; @Test</div><div>&nbsp; &nbsp; public void test06(){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; String sql = &quot;select max(salary) from employee&quot;;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; //无论是返回单个数据还是单个对象，都是调用queryForObject</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Double object = jdbcTemplate.queryForObject(sql, Double.class);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(object);</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp;* 实验5：查询salary&gt;4000的数据库记录，封装为List集合返回</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; @Test</div><div>&nbsp; &nbsp; public void test05(){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; String sql = &quot;SELECT emp_id empId,emp_name empName,salary FROM employee WHERE salary&gt;?&quot;;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; //封装List；集合里面元素的类型</div><div>&nbsp; &nbsp; &nbsp; &nbsp; List&lt;Employee&gt; list = jdbcTemplate.query(sql, new BeanPropertyRowMapper&lt;&gt;(Employee.class), 4000);</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (Employee employee : list) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(employee);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp;* 实验4：查询emp_id=5的数据库记录，封装为一个Java对象返回；</div><div>&nbsp; &nbsp; &nbsp;* javaBean需要和数据库中字段名一致，否则无法完成封装；</div><div>&nbsp; &nbsp; &nbsp;*</div><div>&nbsp; &nbsp; &nbsp;* jdbcTemplate在方法级别进行了区分</div><div>&nbsp; &nbsp; &nbsp;* 查询集合：jdbcTemplate.query()</div><div>&nbsp; &nbsp; &nbsp;* 查询单个对象：jdbcTemplate.queryForObject()</div><div>&nbsp; &nbsp; &nbsp;*&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;如果查询没结果就报错；</div><div>&nbsp; &nbsp; &nbsp;*</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; @Test</div><div>&nbsp; &nbsp; public void test04(){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; String sql = &quot;SELECT emp_id empId,emp_name empName,salary FROM employee WHERE emp_id=?&quot;;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; //RowMapper：每一行记录和javaBean的属性如何映射</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Employee employee = null;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; try {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; employee = jdbcTemplate.queryForObject(sql, new BeanPropertyRowMapper&lt;&gt;(Employee.class), 50);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; } catch (DataAccessException e) {</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(employee);</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp;* 实验3：批量插入；</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; @Test</div><div>&nbsp; &nbsp; public void test03(){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; String&nbsp; sql =&quot;INSERT INTO employee(emp_name,salary) VALUES(?,?)&quot;;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; //List&lt;Object[]&gt;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; //List的长度就是sql语句要执行的次数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; //Object[]：每次执行要用的参数</div><div>&nbsp; &nbsp; &nbsp; &nbsp; List&lt;Object[]&gt; batchArgs = new ArrayList&lt;Object[]&gt;();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; batchArgs.add(new Object[]{&quot;张三&quot;,1998.98});</div><div>&nbsp; &nbsp; &nbsp; &nbsp; batchArgs.add(new Object[]{&quot;李四&quot;,2998.98});</div><div>&nbsp; &nbsp; &nbsp; &nbsp; batchArgs.add(new Object[]{&quot;王五&quot;,3998.98});</div><div>&nbsp; &nbsp; &nbsp; &nbsp; batchArgs.add(new Object[]{&quot;赵六&quot;,4998.98});</div><div><br/></div><div>&nbsp; &nbsp; &nbsp; &nbsp; int[] is = jdbcTemplate.batchUpdate(sql, batchArgs);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; for (int i : is) {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; System.out.println(i);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; }</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; /**</div><div>&nbsp; &nbsp; &nbsp;* 实验2：将emp_id=5的记录的salary字段更新为1300.00</div><div>&nbsp; &nbsp; &nbsp;*/</div><div>&nbsp; &nbsp; @Test</div><div>&nbsp; &nbsp; public void test02(){</div><div>&nbsp; &nbsp; &nbsp; &nbsp; String sql = &quot;UPDATE employee SET salary=? WHERE emp_id=?&quot;;</div><div>&nbsp; &nbsp; &nbsp; &nbsp; int update = jdbcTemplate.update(sql, 1300.00,5);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(&quot;更新员工：&quot;+update);</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; @Test</div><div>&nbsp; &nbsp; public void test() throws SQLException {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; DataSource bean = ioc.getBean(DataSource.class);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; Connection connection = bean.getConnection();</div><div>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(connection);</div><div>&nbsp; &nbsp; &nbsp; &nbsp; connection.close();</div><div><br/></div><div>&nbsp; &nbsp; }</div><div><br/></div><div>&nbsp; &nbsp; @Test</div><div>&nbsp; &nbsp; public void test01() throws SQLException {</div><div>&nbsp; &nbsp; &nbsp; &nbsp; System.out.println(jdbcTemplate);</div><div>&nbsp; &nbsp; }</div><div><br/></div><div>}</div></div><div><br/></div><div><br/></div><div><hr/></div><div><br/></div><div><br/></div></en-note>]]></content><created>20220403T090348Z</created><note-attributes><author>雷丰阳</author><source>desktop.win</source><source-application>evernote.win32</source-application></note-attributes></note></en-export>
